// Any extra mixins beyond the normal bootstrap ones can go here.
@mixin box-sizing($sizing) {
  box-sizing: $sizing;
  -moz-box-sizing: $sizing;
  -webkit-box-sizing: $sizing;
}

@mixin border-radius($radius) {
  border-radius: $radius;
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
}
// Sudo element
@mixin beforeAfter($width: 100%, $height: 100%, $zindex: 1,){
    content: "";
    left: 0;
    width: $width;
    height: $height;
    z-index: $zindex;

}

// Center only top position
@mixin centerTop {
    position: absolute;
    top: 50%;
    @include transform(translateY(-50%));
}

@mixin box-sizing($val) {
  box-sizing: $val;
  -moz-box-sizing: $val;
  -webkit-box-sizing: $val;
}

@mixin box-shadow ($shadow: none) {
	-webkit-box-shadow: $shadow;
	-moz-box-shadow:    $shadow;
	box-shadow:         $shadow;
}

@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing:   antialiased;
    -moz-osx-font-smoothing:  grayscale;
  }

  @else {
    -webkit-font-smoothing:   subpixel-antialiased;
    -moz-osx-font-smoothing:  auto;
  }
}

@mixin display-flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}
// Flex mixin
@mixin displaFlex {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: row wrap;
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: justify;
    align-items: flex-start;
    justify-content: center;
}

// Flex mixin
@mixin df-align-center{
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: row wrap;
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: justify;
    -webkit-box-pack: center;
    -moz-box-pack: center;
    -ms-flex-pack: center; 
    -webkit-justify-content: center;
    justify-content: center;
    -webkit-box-align: center;
    align-items: center;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin baseblock-box-shadow ($level: 1, $direction: 1) {
  $shadow: none;

  @if $level == 1 {
    $shadow: 0 ($direction * 1px) 3px rgba(0,0,0,0.12), 0 ($direction * 1px) 2px rgba(0,0,0,0.24);
  }
  @else if $level == 2 {
    $shadow: 0 ($direction * 3px) 6px rgba(0,0,0,0.16), 0 ($direction * 2px) 4px rgba(0,0,0,0.23);
  }
  @else if $level == 3 {
    $shadow: 0 ($direction * 5px) 8px rgba(0,0,0,0.19), 0 ($direction * 4px) 6px rgba(0,0,0,0.23);
  }
  @else if $level == 4 {
    $shadow: 0 ($direction * 8px) 12px rgba(0,0,0,0.25), 0 ($direction * 6px) 6px rgba(0,0,0,0.22);
  }
  @else if $level >= 5 {
    $shadow: 0 ($direction * 10px) 16px rgba(0,0,0,0.30), 0 ($direction * 6px) 8px rgba(0,0,0,0.22);
  }

  @include box-shadow($shadow);
}

@mixin font-size($fs-map, $fs-breakpoints: $grid-breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    }
    @else {
      //If $fs-font-size is a key that exists in $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}

@mixin transform($property){
    -webkit-transform: $property;
    -moz-transform: $property;
    transform: $property;
}

@mixin transition($property){
    -webkit-transition: $property;
    -moz-transform: $property;
    transform: $property;
}


// Responsive Breakpoints
@mixin breakpointed($point) {
  @if $point == desktop-large {
    @media (min-width: 1600) { @content ; }
  }

  @else if $point == desktop {
    @media (min-width: 1440px) { @content ; }
  }

  @else if $point == desktop-small {
    @media (min-width: 1360px) { @content ; }
  }

  @else if $point == laptop {
    @media (min-width: 1280px) { @content ; }
  }
  @else if $point == tablet {
    @media only screen and (min-width: 768px) and (max-width: 991px) { @content ; }
  }
  @else if $point == tablet-landscape {
    @media only screen and (min-width: 992px) and (max-width: 1024px) { @content ; }
  }

  @else if $point == mobile-landscape {
    @media only screen and (min-width: 480px) and (max-width: 767px) { @content;}
  }

  @else if $point == large-mobile {
    @media (max-width: 375px) { @content ; }
  }

  @else if $point == mobile {
    @media only screen and (min-width: 320px) and (max-width: 767px) { @content ; }
  }
  @else if $point == sm-mobile {
    @media (max-width: 320px) { @content ; }
  }
  @else if $point == ex-sm-mobile {
    @media (max-width: 240px) { @content ; }
  }
}

// Font face mixin
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

// Mixin font
@mixin font($fontFamily: $defaultFont, $fontStyle: normal, $fontWeight: normal){
    font-family: $fontFamily;
    font-style: $fontStyle;
    font-weight: $fontWeight;
}


// Filter mixin
// grayscale      ex: filter: grayscale(100%);
// sepia          ex: filter: sepia(100%);
// saturate       ex: filter: saturate(0%);
// hue-rotate     ex: filter: hue-rotate(45deg);
// invert         ex: filter: invert(100%);
// brightness     ex: filter: brightness(15%);
// contrast       ex: filter: contrast(200%);
// blur           ex: filter: blur(2px);

@mixin filter($filter-type,$filter-amount) { 
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}

// Usage scss:  @include filter(grayscale, 100%);